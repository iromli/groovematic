<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <author>
        <name>Isman Firmansyah</name>
        <uri>http://groovematic.com/</uri>
        <email>isman.firmansyah@gmail.com</email>
    </author>
    <title>Groovematic</title>
    <id>tag:groovematic.com,2011-06-11:/atom.xml</id>
    <link rel="alternate" type="text/html" href="http://groovematic.com/" />
    <link rel="self" type="application/atom+xml" href="http://groovematic.com/atom.xml" />
    <icon>http://groovematic.com/img/favicon.ico</icon>
    <logo>http://groovematic.com/feed-logo.png</logo>
    <updated>2014-02-14T01:43:00Z</updated>
    <generator uri="https://github.com/posativ/acrylamid/" version="0.7.7">acrylamid</generator>
        <entry>
                <title>Thank You, Beautiplan</title>
                <link rel="alternate" type="text/html" href="http://groovematic.com/2014/02/thank-you-beautiplan/" />
                <id>tag:groovematic.com,2014-02-14:/2014/02/thank-you-beautiplan</id>
                <updated>2014-02-14T01:43:00Z</updated>
                
                <author>
                    <name>Isman Firmansyah</name>
                    <uri>http://groovematic.com/</uri>
                    <email>isman.firmansyah@gmail.com</email>
                </author>
                <content type="html">&lt;h2&gt;A Farewell Note&lt;/h2&gt;
        &lt;blockquote&gt;
        &lt;p&gt;But I know this. We&#39;re ready to move forward again in our way. Together or apart, no matter how far apart, we live in one another. We go on together.&lt;/p&gt;
        &lt;/blockquote&gt;
        &lt;p&gt;Almost a year ago, the majority of people who built SixReps were joining &lt;a href=&#34;http://www.beautiplan.com/&#34;&gt;Beautiplan&lt;/a&gt; team.
        As you can see, Beautiplan has its &lt;a href=&#34;http://lite.beautiplan.com/&#34;&gt;lite&lt;/a&gt;, &lt;a href=&#34;http://m.beautiplan.com/&#34;&gt;mobile web&lt;/a&gt;, and &lt;a href=&#34;https://play.google.com/store/apps/details?id=com.beautiplan.android&#34;&gt;Android&lt;/a&gt; version.
        I&#39;ve been involved in those apps although I didn&#39;t contribute any code at all.
        I was a member of their backend engineering team — my primary role was to maintain internal API,
        log files management, error reporting platform, etc.&lt;/p&gt;
        &lt;p&gt;I hate to say goodbye, but at the end of this month, I will no longer work for Beautiplan.
        It&#39;s a tough decision, but I have to move on as my interests have been shifted and I&#39;m pursuing something else.&lt;/p&gt;
        &lt;p&gt;Thanks to everyone at Beautiplan. Lovely people, joyful moments.&lt;/p&gt;
        &lt;p&gt;&lt;img alt=&#34;In my heart&#34; class=&#34;thumbnail&#34; src=&#34;http://groovematic.com/img/2014/02/in-my-heart.png&#34;/&gt;&lt;/p&gt;</content>
            </entry>
    
        <entry>
                <title>The Birth of Flosculus</title>
                <link rel="alternate" type="text/html" href="http://groovematic.com/2013/11/the-birth-of-flosculus/" />
                <id>tag:groovematic.com,2013-11-23:/2013/11/the-birth-of-flosculus</id>
                <updated>2013-11-22T22:18:00Z</updated>
                
                <author>
                    <name>Isman Firmansyah</name>
                    <uri>http://groovematic.com/</uri>
                    <email>isman.firmansyah@gmail.com</email>
                </author>
                <content type="html">&lt;h2&gt;A Call For Help&lt;/h2&gt;
        &lt;p&gt;Few days ago, i tweeted this:&lt;/p&gt;
        &lt;p&gt;&lt;img alt=&#34;CPU-blown&#34; class=&#34;thumbnail&#34; src=&#34;http://groovematic.com/img/2013/11/cpu-blown.png&#34;/&gt;&lt;/p&gt;
        &lt;p&gt;If you notice, the top 2 commands show a huge difference between
        CPU usage consumed by Ruby and Python programs — the former is a
        &lt;a href=&#34;http://fluentd.org/&#34;&gt;Fluentd&lt;/a&gt;-based script that collects &lt;a href=&#34;http://nginx.org/&#34;&gt;nginx&lt;/a&gt; access log,
        parses each line, and sends the data to another Fluentd instance
        (in remote server); while the latter is a &lt;a href=&#34;http://socket.io/&#34;&gt;socket.io&lt;/a&gt;
        server built on top of &lt;a href=&#34;https://github.com/abourget/gevent-socketio&#34;&gt;gevent-socketio&lt;/a&gt; —
        in AWS EC2 micro instance.&lt;/p&gt;
        &lt;p&gt;I was wondering what went wrong?
        Hence i looked up to the official &lt;a href=&#34;http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/concepts_micro_instances.html#when-instance-uses-allotted-resources&#34;&gt;AWS EC2 documentation&lt;/a&gt;
        to find any hint, and stumbled upon a line:&lt;/p&gt;
        &lt;blockquote&gt;
        &lt;p&gt;Limit the number of recurring processes that use CPU time (for example, cron jobs, daemons)&lt;/p&gt;
        &lt;/blockquote&gt;
        &lt;p&gt;That&#39;s strange!! Both are daemonized long-running programs, but why the Ruby script blown the CPU?
        Do i need to have a bigger box for a small service
        and convince my employer to spend more money?&lt;/p&gt;
        &lt;h2&gt;First Attempt: Becoming A Rubyist&lt;/h2&gt;
        &lt;p&gt;That day, i was reading the sourcecode trying to figure out
        how Fluentd works internally. &lt;strong&gt;And i failed!!&lt;/strong&gt;&lt;/p&gt;
        &lt;p&gt;As you might have known, i know nothing about Ruby nowadays — my Ruby days were long gone.
        Please don&#39;t get me wrong, Ruby is a sexy programming language.
        But you know what, not all people able to deal with the &lt;em&gt;hottie&lt;/em&gt; for a long-term relationship.&lt;/p&gt;
        &lt;p&gt;&lt;img alt=&#34;nosebleed&#34; class=&#34;thumbnail&#34; src=&#34;http://groovematic.com/img/2013/11/nosebleed-anime.jpg&#34;/&gt;&lt;/p&gt;
        &lt;h2&gt;Second Attempt: Keep Calm &amp;amp; Move On&lt;/h2&gt;
        &lt;p&gt;At the same day, i suddenly remembered about a Python library called &lt;a href=&#34;https://github.com/josegonzalez/beaver&#34;&gt;Beaver&lt;/a&gt;.
        From its repository page, Beaver is best described as:&lt;/p&gt;
        &lt;blockquote&gt;
        &lt;p&gt;python daemon that munches on logs and sends their contents to logstash&lt;/p&gt;
        &lt;/blockquote&gt;
        &lt;p&gt;Obviously, Beaver acts as a &lt;a href=&#34;http://logstash.net/&#34;&gt;Logstash&lt;/a&gt; input plugin.
        Well, i can haz Beaver for Fluentd?&lt;/p&gt;
        &lt;h3&gt;Looking At The Big Picture&lt;/h3&gt;
        &lt;p&gt;So i sat down and read the internal documentation on how &lt;a href=&#34;http://www.beautiplan.com/&#34;&gt;Beautiplan&lt;/a&gt;
        infrastructure are made of — especially the logging files management section.
        Anyway, here&#39;s the schema with a little detail for each component:&lt;/p&gt;
        &lt;p&gt;&lt;img alt=&#34;schema&#34; class=&#34;thumbnail&#34; src=&#34;http://groovematic.com/img/2013/11/schema.png&#34;/&gt;&lt;/p&gt;
        &lt;ol&gt;
        &lt;li&gt;
        &lt;h4&gt;forwarder&lt;/h4&gt;
        &lt;p&gt;&lt;em&gt;forwarder&lt;/em&gt; is a daemonized program. Its main job is tailing a rotated log file,
        parse each line, and send the result to &lt;em&gt;aggregator&lt;/em&gt; elsewhere.
        Just imagine a &lt;code&gt;tail -F scarry.log&lt;/code&gt; command with steroid.
        Fluentd, Beaver, or your own script fits the job, as long as it knows
        how to speak to &lt;em&gt;aggregator&lt;/em&gt;.&lt;/p&gt;
        &lt;/li&gt;
        &lt;li&gt;
        &lt;h4&gt;aggregator&lt;/h4&gt;
        &lt;p&gt;Actually &lt;em&gt;aggregator&lt;/em&gt; is the first-class citizen here.
        Everything is setup to match its behavior.
        Its job is to receive incoming data — usually a JSON — do some works,
        and send the result elsewhere, either a simple &lt;em&gt;stdout&lt;/em&gt; or remote &lt;em&gt;datastore&lt;/em&gt;.
        Fluentd, Logstash, or even &lt;a href=&#34;https://github.com/mozilla-services/heka&#34;&gt;Heka&lt;/a&gt; will do the job for you.&lt;/p&gt;
        &lt;/li&gt;
        &lt;li&gt;
        &lt;h4&gt;datastore&lt;/h4&gt;
        &lt;p&gt;The &lt;em&gt;datastore&lt;/em&gt; stores (dooh) the timeseries data extracted from a log.
        It&#39;s &lt;a href=&#34;http://elasticsearch.org/&#34;&gt;ElasticSearch&lt;/a&gt; by the way. Other datastores might work.&lt;/p&gt;
        &lt;/li&gt;
        &lt;li&gt;
        &lt;h4&gt;frontend&lt;/h4&gt;
        &lt;p&gt;Remember the old days when you have to stare hundred lines of a log file (bad)
        or doing shell command and pipeline magic (better) to know what&#39;s really
        going on in your production-ready application?
        Enter &lt;a href=&#34;http://rashidkpc.github.io/Kibana/&#34;&gt;Kibana&lt;/a&gt; or &lt;a href=&#34;http://www.elasticsearch.org/overview/kibana/&#34;&gt;Kibana 3&lt;/a&gt; then!
        I think you&#39;ll like this web-based log visualization app.&lt;/p&gt;
        &lt;/li&gt;
        &lt;/ol&gt;
        &lt;p&gt;Given the schema above, i realized that i need to replace &lt;em&gt;forwarder&lt;/em&gt; with
        Beaver-like library. After all, the box where current &lt;em&gt;forwarder&lt;/em&gt; program lives
        right now, is a server where it has plenty of Python-based scripts there.
        So i though, let&#39;s add yet another Python script.&lt;/p&gt;
        &lt;h2&gt;Current Status: Flosculus in Action&lt;/h2&gt;
        &lt;p&gt;At its core, Beaver uses &lt;a href=&#34;http://code.activestate.com/recipes/577968-log-watcher-tail-f-log/&#34;&gt;this script&lt;/a&gt; (MIT-licensed).
        So i took down that one, combined with &lt;a href=&#34;https://github.com/fluent/fluent-logger-python&#34;&gt;Python binding for Fluentd&lt;/a&gt;,
        did some modification, and voila ... it&#39;s &lt;a href=&#34;https://github.com/iromli/flosculus&#34;&gt;Flosculus&lt;/a&gt;.
        Flosculus is very young and definetely will need lots of enhancements.
        But it&#39;s already running in production though.&lt;/p&gt;
        &lt;p&gt;Yes, i know some of you might said, &lt;em&gt;&#34;Dont reinvent the wheel&#34;&lt;/em&gt;.
        But what if the wheels aren&#39;t exactly what i need?&lt;/p&gt;
        &lt;p&gt;&lt;img alt=&#34;bicycle&#34; class=&#34;thumbnail&#34; src=&#34;http://groovematic.com/img/2013/11/bicycle.jpg&#34;/&gt;&lt;/p&gt;
        &lt;p&gt;In the end, Flosculus is my attempt to create something like Beaver or Fluentd &lt;code&gt;in_tail&lt;/code&gt; plugin.
        I wanna see it grows (or likely dies prematurely). The future is far beyond.&lt;/p&gt;</content>
            </entry>
    
        <entry>
                <title>Introducing Genma</title>
                <link rel="alternate" type="text/html" href="http://groovematic.com/2013/07/introducing-genma/" />
                <id>tag:groovematic.com,2013-07-14:/2013/07/introducing-genma</id>
                <updated>2013-07-13T17:19:00Z</updated>
                
                <author>
                    <name>Isman Firmansyah</name>
                    <uri>http://groovematic.com/</uri>
                    <email>isman.firmansyah@gmail.com</email>
                </author>
                <content type="html">&lt;h2&gt;I Need Isolated Workspace&lt;/h2&gt;
        &lt;p&gt;While learning &lt;a href=&#34;http://golang.org/&#34;&gt;Go&lt;/a&gt;, i found myself missing Python &lt;a href=&#34;http://www.virtualenv.org/&#34;&gt;virtualenv&lt;/a&gt;.
        If you&#39;re not familiar with it, just imagine an isolated workspace for your development
        (for convenience, we&#39;ll call it virtualenv).&lt;/p&gt;
        &lt;p&gt;Surprisingly, creating this virtualenv is pretty easy in Go.
        By reading the &lt;a href=&#34;http://golang.org/doc/code.html#Organization&#34;&gt;documentation&lt;/a&gt;, you&#39;ll know that you only need to
        customize Go environment variables.
        Let say, if i want to create a workspace located at
        &lt;code&gt;~/workspaces/foobar&lt;/code&gt; and install 3rd party packages,
        all i need to do is simply typing following command:&lt;/p&gt;
        &lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;nv&#34;&gt;$ GOPATH&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;~/workspaces/foobar &lt;span class=&#34;nv&#34;&gt;GOBIN&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;~/workspaces/foobar/bin go get github.com/user/repo
        &lt;/pre&gt;&lt;/div&gt;
        
        
        &lt;p&gt;Go will takes care everything, including creating a bunch of directories:&lt;/p&gt;
        &lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;nv&#34;&gt;$ &lt;/span&gt;tree ~/workspaces
        /home/iromli/workspaces
        └── foobar
            ├── bin
            ├── pkg
            └── src
        &lt;/pre&gt;&lt;/div&gt;
        
        
        &lt;p&gt;Now, the question is when i have lot of virtualenv,
        how do i manage them without having to type repetitive commands?
        Enter &lt;a href=&#34;https://github.com/iromli/genma&#34;&gt;Genma&lt;/a&gt;.&lt;/p&gt;
        &lt;h2&gt;Genma The Virtualenv Manager&lt;/h2&gt;
        &lt;p&gt;Genma is heavily inspired by &lt;a href=&#34;https://bitbucket.org/dhellmann/virtualenvwrapper&#34;&gt;virtualenvwrapper&lt;/a&gt;.
        Hence the main goals are:&lt;/p&gt;
        &lt;ul&gt;
        &lt;li&gt;creating and deleting virtualenv should be easy&lt;/li&gt;
        &lt;li&gt;switching between virtualenv back and forth should not PITA&lt;/li&gt;
        &lt;/ul&gt;
        &lt;p&gt;At the time i wrote this blog post, &lt;a href=&#34;https://github.com/iromli/genma/releases/tag/0.2.0&#34;&gt;v0.2.0&lt;/a&gt; has been released.
        So let&#39;s have a quick tour, shall we?&lt;/p&gt;
        &lt;h3&gt;Installing Genma&lt;/h3&gt;
        &lt;p&gt;First things first, ensure you have a working Go installation
        (i&#39;m using &lt;a href=&#34;https://github.com/wfarr/goenv&#34;&gt;goenv&lt;/a&gt; by the way) and Bash.
        Afterwards, you need to grab a copy of Genma.
        According to its &lt;code&gt;README.md&lt;/code&gt; file, the preferred setup is to use &lt;code&gt;git&lt;/code&gt;.&lt;/p&gt;
        &lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;nv&#34;&gt;$ &lt;/span&gt;git clone git://github.com/iromli/genma.git ~/.genma
        &lt;span class=&#34;nv&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; ~/.genma
        &lt;span class=&#34;nv&#34;&gt;$ &lt;/span&gt;git tag -l | tail -1 | xargs git checkout
        &lt;span class=&#34;nv&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;source&lt;/span&gt; ~/.genma/genma.sh
        &lt;/pre&gt;&lt;/div&gt;
        
        
        &lt;p&gt;Confirm that the installation process is completed:&lt;/p&gt;
        &lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;nv&#34;&gt;$ &lt;/span&gt;genma -h
        Go &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;virtual&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; ENvironment MAnager v0.2.0
        
        Usage: genma &amp;lt;&lt;span class=&#34;nb&#34;&gt;command&lt;/span&gt;&amp;gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&amp;lt;args&amp;gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
        
        Commands:
          deactivate              Disable active virtualenv.
          lsvirtualenv            List available virtualenv.
          mkvirtualenv &amp;lt;name&amp;gt;     Create and activate new virtualenv.
          rmvirtualenv &amp;lt;name&amp;gt;     Delete existing virtualenv.
          workon &amp;lt;name&amp;gt;           Activate or switch to a virtual environment.
        
        Options:
          -h, --help              Show &lt;span class=&#34;nb&#34;&gt;help &lt;/span&gt;and exit.
          -v, --version           Show version and &lt;span class=&#34;nb&#34;&gt;exit&lt;/span&gt;
        &lt;/pre&gt;&lt;/div&gt;
        
        
        &lt;p&gt;If you want &lt;code&gt;genma&lt;/code&gt; always available in your shell,
        simply do &lt;code&gt;source ~/.genma/genma.sh&lt;/code&gt; elsewhere (e.g. &lt;code&gt;~/.bashrc&lt;/code&gt;).&lt;/p&gt;
        &lt;h3&gt;Creating Virtualenv&lt;/h3&gt;
        &lt;p&gt;Assuming that you haven&#39;t create any virtualenv using Genma, let&#39;s do it now.&lt;/p&gt;
        &lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;nv&#34;&gt;$ &lt;/span&gt;genma mkvirtualenv env
        &lt;/pre&gt;&lt;/div&gt;
        
        
        &lt;p&gt;By default, your new virtualenv will be created under &lt;code&gt;~/.genma/virtualenv&lt;/code&gt; directory.
        This location is called &lt;code&gt;$GENMA_HOME&lt;/code&gt; and it&#39;s defined as environment variable.&lt;/p&gt;
        &lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;g:env&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$ &lt;/span&gt;tree ~/.genma/virtualenv
        ~/.genma/virtualenv
        └── env
            ├── bin
            ├── pkg
            └── src
        &lt;/pre&gt;&lt;/div&gt;
        
        
        &lt;p&gt;Notice that your shell prompt is prefixed with &lt;code&gt;(g:env)&lt;/code&gt;.
        That&#39;s how Genma tells you if you&#39;re in any active virtualenv.
        The format itself is &lt;em&gt;(g:any_virtualenv_name)&lt;/em&gt;.
        The &lt;code&gt;g:&lt;/code&gt; part distinguishes Go and Python virtualenv (in case you&#39;re a Pythonista too).&lt;/p&gt;
        &lt;h3&gt;Disabling Virtualenv&lt;/h3&gt;
        &lt;p&gt;Once your virtualenv has been created, you can disable it with &lt;code&gt;genma
        deactivate&lt;/code&gt; command.
        Behind the scene, Genma removes shell prompt prefix and
        unsets some Go environment variables.&lt;/p&gt;
        &lt;h3&gt;Activating or Switching to Virtualenv&lt;/h3&gt;
        &lt;p&gt;Assuming &lt;em&gt;env&lt;/em&gt; is in dormant state, how do you activate it? That&#39;s easy, just
        do &lt;code&gt;genma workon env&lt;/code&gt;. Ofcourse you can always change the virtualenv name.&lt;/p&gt;
        &lt;h3&gt;Deleting Virtualenv&lt;/h3&gt;
        &lt;p&gt;So you want to remove unnecessary &lt;em&gt;env&lt;/em&gt;? &lt;code&gt;genma rmvirtualenv env&lt;/code&gt; will do the
        dirty job for you. However you can&#39;t remove currently-active virtualenv though.&lt;/p&gt;
        &lt;h3&gt;Listing All Virtualenv&lt;/h3&gt;
        &lt;p&gt;The &lt;code&gt;genma lsvirtualenv&lt;/code&gt; likely useful if you have lots of virtualenv.&lt;/p&gt;
        &lt;p&gt;See illustration below:&lt;/p&gt;
        &lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;g:env&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$ &lt;/span&gt;tree ~/.genma/virtualenv
        ~/.genma/virtualenv
        └── env
            ├── bin
            ├── pkg
            └── src
        └── env2
            ├── bin
            ├── pkg
            └── src
        &lt;/pre&gt;&lt;/div&gt;
        
        
        &lt;p&gt;Given the hierarchy, the following command will return a list of virtualenv names:&lt;/p&gt;
        &lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;nv&#34;&gt;$ &lt;/span&gt;genma lsvirtualenv
        env
        env2
        &lt;/pre&gt;&lt;/div&gt;
        
        
        &lt;p&gt;That&#39;s it, you got the basic of Genma commands.&lt;/p&gt;
        &lt;h2&gt;Genma and You&lt;/h2&gt;
        &lt;p&gt;Genma might be overkill for your daily workflow.
        But as the author of Genma, i find it useful especially when i have lots of
        workspaces. I hope it helps you too.&lt;/p&gt;</content>
            </entry>
    
        <entry>
                <title>Tornado, Lessons Learned</title>
                <link rel="alternate" type="text/html" href="http://groovematic.com/2013/03/tornado-lessons-learned/" />
                <id>tag:groovematic.com,2013-03-04:/2013/03/tornado-lessons-learned</id>
                <updated>2013-03-03T21:19:00Z</updated>
                
                <author>
                    <name>Isman Firmansyah</name>
                    <uri>http://groovematic.com/</uri>
                    <email>isman.firmansyah@gmail.com</email>
                </author>
                <content type="html">&lt;h2&gt;Back In The Days&lt;/h2&gt;
        &lt;p&gt;Last year, during &lt;a href=&#34;http://www.sixreps.com&#34;&gt;SixReps&lt;/a&gt; days, me and Tino (&lt;a href=&#34;http://twitter.com/kusut&#34;&gt;@kusut&lt;/a&gt;)
        worked on and maintained a project built on top of &lt;a href=&#34;http://tornadoweb.org/&#34;&gt;Tornado&lt;/a&gt;.
        The project itself is a web service that accepts 3rd-party apps request
        and serves the response through HTTP.
        We used MySQL as primary datasource, &lt;a href=&#34;http://redis.io/&#34;&gt;Redis&lt;/a&gt; for caches and queues,
        and Amazon S3 to store uploaded images.
        We were happy enough to see that our stack is running well for our usecase.&lt;/p&gt;
        &lt;p&gt;&lt;strong&gt;FYI&lt;/strong&gt;, both of us aren&#39;t worked on that project any longer.&lt;/p&gt;
        &lt;h2&gt;For Your Consideration&lt;/h2&gt;
        &lt;p&gt;I&#39;m not going to go deeper about our implementation nor Tornado API itself
        (i&#39;m not a Tornado guru yet, perhaps someday in future?).
        Instead, i will share lessons learned after using this nifty framework.
        The idea is to notify newcomers about gotchas they might encounter
        and tradeoffs they should aware of when using Tornado.&lt;/p&gt;
        &lt;p&gt;Basically, before starting any serious work using Tornado,
        you should ask yourself these questions:&lt;/p&gt;
        &lt;ol&gt;
        &lt;li&gt;Does your app need to be synchronous/asynchronous?&lt;/li&gt;
        &lt;li&gt;Do you comfortable with callback-style programming?&lt;/li&gt;
        &lt;/ol&gt;
        &lt;h2&gt;Being Synchronous (Is Mostly Fine)&lt;/h2&gt;
        &lt;p&gt;If your app doesn&#39;t care about being asynchronous, you can start writing code
        immediately.
        You might wondering why bother yourself using something that written for
        asynchronous, but you don&#39;t even care about asynchronous at all?&lt;/p&gt;
        &lt;ol&gt;
        &lt;li&gt;Tornado is not a full-stack framework. It&#39;s simple, well-written, and well-documented.
            By reading the sourcecode itself, you&#39;ll understand how it works ... eventually.&lt;/li&gt;
        &lt;li&gt;Tornado has its own web framework (much like &lt;a href=&#34;http://webpy.org/&#34;&gt;web.py&lt;/a&gt;).&lt;/li&gt;
        &lt;li&gt;Tornado has its own templating language (quite similar to &lt;a href=&#34;http://jinja.pocoo.org/&#34;&gt;Jinja&lt;/a&gt;).&lt;/li&gt;
        &lt;li&gt;Tornado has its own web server.&lt;/li&gt;
        &lt;li&gt;The most important things, you can use (almost?) any Python library, even if it&#39;s not written specifically for Tornado.&lt;/li&gt;
        &lt;/ol&gt;
        &lt;p&gt;Let me show you snippets to illustrate point 2 - 4. First things first, create
        &lt;code&gt;app.py&lt;/code&gt;:&lt;/p&gt;
        &lt;table class=&#34;codehilitetable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt; 1
         2
         3
         4
         5
         6
         7
         8
         9
        10
        11
        12
        13
        14
        15
        16
        17
        18
        19
        20
        21
        22
        23
        24
        25
        26
        27
        28&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;tornado.web&lt;/span&gt;          &lt;span class=&#34;c&#34;&gt;# the Tornado web framework&lt;/span&gt;
        &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;tornado.httpserver&lt;/span&gt;   &lt;span class=&#34;c&#34;&gt;# the Tornado web server&lt;/span&gt;
        &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;tornado.ioloop&lt;/span&gt;       &lt;span class=&#34;c&#34;&gt;# the Tornado event-loop&lt;/span&gt;
        
        &lt;span class=&#34;c&#34;&gt;# handles incoming request, this is the C part in MVC&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;MainHandler&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tornado&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;web&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;RequestHandler&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
                &lt;span class=&#34;c&#34;&gt;# renders the Tornado template&lt;/span&gt;
                &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;render&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;homepage.html&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;John Doe&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        
        &lt;span class=&#34;c&#34;&gt;# prepares the application&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;app&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tornado&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;web&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Application&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;
                &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;r&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MainHandler&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;debug&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;template_path&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;templates&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;__name__&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;c&#34;&gt;# prepares the web server&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;srv&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tornado&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;httpserver&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;HTTPServer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;xheaders&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        
            &lt;span class=&#34;c&#34;&gt;# listens incoming request on port 8000&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;srv&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;8000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        
            &lt;span class=&#34;c&#34;&gt;# starts the server using 1 process&lt;/span&gt;
            &lt;span class=&#34;c&#34;&gt;# unless you know what you&amp;#39;re doing, always set to 1&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;srv&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        
            &lt;span class=&#34;c&#34;&gt;# runs all the things&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;tornado&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ioloop&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;IOLoop&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;instance&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
        &lt;/pre&gt;&lt;/div&gt;
        &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
        
        &lt;p&gt;Before running the app, make sure you have &lt;code&gt;homepage.html&lt;/code&gt; template, located
        under &lt;code&gt;templates&lt;/code&gt; directory:&lt;/p&gt;
        &lt;table class=&#34;codehilitetable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;1
        2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Greeting from Tornado&lt;span class=&#34;nt&#34;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Hello, {{ user }}&lt;span class=&#34;nt&#34;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
        &lt;/pre&gt;&lt;/div&gt;
        &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
        
        &lt;p&gt;Run the app by typing &lt;code&gt;python app.py&lt;/code&gt; in your console, and go to &lt;code&gt;http://localhost:8000/&lt;/code&gt;.
        Now you already have a synchronous app built on top of Tornado.
        Pretty straight-forward isn&#39;t it?&lt;/p&gt;
        &lt;p&gt;So, what&#39;s the &lt;em&gt;tradeoff of being synchronous&lt;/em&gt;?
        You&#39;ll lose the power of Tornado event-loop itself, of course.
        Some users claimed they use a combination of &lt;a href=&#34;https://www.djangoproject.com/&#34;&gt;Django&lt;/a&gt;/&lt;a href=&#34;http://flask.pocoo.org&#34;&gt;Flask&lt;/a&gt; and Tornado.
        It&#39;s true that Tornado has a WSGI-compatible web server,
        but you can&#39;t expect your app to go asynchronously out-of-the-box
        by simply running it behind the Tornado web server.&lt;/p&gt;
        &lt;h2&gt;Going Asynchronous (Or How To Not Blocking The IOLoop)&lt;/h2&gt;
        &lt;p&gt;I already mentioned &lt;code&gt;tornado.ioloop.IOLoop&lt;/code&gt; on previous section.
        Basically, IOLoop is a Tornado binding to the underlying event-loop
        (&lt;code&gt;epoll&lt;/code&gt; on Linux and &lt;code&gt;kqueue&lt;/code&gt; on BSD).
        I don&#39;t know about Windows support, but there&#39;s a project
        called &lt;a href=&#34;https://github.com/saghul/tornado-pyuv&#34;&gt;tornado-pyuv&lt;/a&gt; that utilizes &lt;code&gt;libuv&lt;/code&gt; to provide event-loop that runs
        on all platforms.&lt;/p&gt;
        &lt;p&gt;You have to be very careful when writing asynchronous app using Tornado.
        Your simple code that uses &lt;code&gt;stdlib&lt;/code&gt; callables or 3rd-party libraries might blocking the IOLoop.
        How do we know IOLoop is blocked?
        It&#39;s hard, but what i was doing back in the days is testing against 2 incoming requests.
        If a request must wait for another request to finish, then IOLoop is blocked.&lt;/p&gt;
        &lt;p&gt;To illustrate &lt;code&gt;stdlib&lt;/code&gt; callable which blocks IOLoop:&lt;/p&gt;
        &lt;table class=&#34;codehilitetable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt; 1
         2
         3
         4
         5
         6
         7
         8
         9
        10
        11
        12
        13
        14
        15
        16
        17
        18
        19
        20
        21
        22
        23
        24
        25
        26
        27
        28
        29
        30
        31
        32
        33&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;time&lt;/span&gt;
        
        &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;tornado.httpclient&lt;/span&gt;
        &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;tornado.httpserver&lt;/span&gt;
        &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;tornado.web&lt;/span&gt;
        
        &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;MainHandler&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tornado&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;web&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;RequestHandler&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
            &lt;span class=&#34;nd&#34;&gt;@tornado.web.asynchronous&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;client&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tornado&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;httpclient&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AsyncHTTPClient&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;client&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fetch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;http://groovematic.com/&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;callback&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_on_finish&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        
            &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;_on_finish&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
                &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;write&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;code&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
                &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;finish&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
        
        &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;SleepHandler&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tornado&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;web&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;RequestHandler&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
            &lt;span class=&#34;nd&#34;&gt;@tornado.web.asynchronous&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sleep&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;           &lt;span class=&#34;c&#34;&gt;# time.sleep is blocking IOLoop, dooh&lt;/span&gt;
                &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;write&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;finish&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
        
        &lt;span class=&#34;n&#34;&gt;app&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tornado&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;web&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Application&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;
                &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;r&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MainHandler&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
                &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;r&amp;quot;/t&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SleepHandler&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;debug&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;__name__&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;srv&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tornado&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;httpserver&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;HTTPServer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;xheaders&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;srv&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;8000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;srv&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;tornado&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ioloop&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;IOLoop&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;instance&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
        &lt;/pre&gt;&lt;/div&gt;
        &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
        
        &lt;p&gt;Open up your console, type &lt;code&gt;curl http://localhost:8000/t&lt;/code&gt;.
        In separate window, type &lt;code&gt;curl http://localhost:8000/&lt;/code&gt;.
        You&#39;ll see that &lt;code&gt;/&lt;/code&gt; have to wait &lt;code&gt;/t&lt;/code&gt; to finish its request-response cyle
        within 3 seconds.
        Fortunately, there&#39;s Tornado equivalent to &lt;code&gt;time.sleep&lt;/code&gt;.
        Please have a look at &lt;code&gt;IOLoop.add_timeout&lt;/code&gt; API.&lt;/p&gt;
        &lt;p&gt;To be honest, 3rd-party libraries written specifically for Tornado is not as
        much as, let say, Django.
        You have to dig into &lt;a href=&#34;https://github.com/facebook/tornado/wiki/Links&#34;&gt;Tornado wiki&lt;/a&gt;,
        &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt;, &lt;a href=&#34;https://bitbucket.org/&#34;&gt;Bitbucket&lt;/a&gt;,
        &lt;a href=&#34;http://tornadogists.org/&#34;&gt;Tornado gist&lt;/a&gt;, or somewhere else
        (IRC/mailing list/search engine) to find what you&#39;re looking for.&lt;/p&gt;
        &lt;p&gt;If for some reasons you must use blocking library, you have options to run the
        blocking execution in separate process,
        either using &lt;a href=&#34;http://tornadogists.org/2894704/&#34;&gt;threading&lt;/a&gt;, &lt;a href=&#34;http://tornadogists.org/2185380/&#34;&gt;multiprocessing&lt;/a&gt;,
        or &lt;a href=&#34;http://tornadogists.org/3849257/&#34;&gt;queue&lt;/a&gt;.
        The implementation may vary, but they share a same concept:&lt;/p&gt;
        &lt;ol&gt;
        &lt;li&gt;Wrap the blocking execution and give the control back to IOLoop immediately.&lt;/li&gt;
        &lt;li&gt;Run the blocking execution in separate process.&lt;/li&gt;
        &lt;li&gt;Notify and/or send the result of blocking execution back to IOLoop.&lt;/li&gt;
        &lt;/ol&gt;
        &lt;p&gt;So, what&#39;s the &lt;em&gt;tradeoff of going asynchronous&lt;/em&gt;?
        Once you&#39;re using blocking library, IOLoop is blocked.
        Depending on your usecase, it might be bad for your business.
        That&#39;s a price to pay.&lt;/p&gt;
        &lt;h2&gt;Callbacks Spaghetti? Fear No More!&lt;/h2&gt;
        &lt;p&gt;To me, the most tricky part of Tornado (in general) and IOLoop (especially),
        is dealing with callbacks.
        If you came from JavaScript or other programming languages emphasizing
        callback-style programming, you&#39;ll know what callback is.&lt;/p&gt;
        &lt;p&gt;Lets take a look an example below:&lt;/p&gt;
        &lt;table class=&#34;codehilitetable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt; 1
         2
         3
         4
         5
         6
         7
         8
         9
        10
        11
        12&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;tornado.httpclient&lt;/span&gt;
        &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;tornado.web&lt;/span&gt;
        
        &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;MainHandler&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tornado&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;web&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;RequestHandler&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
            &lt;span class=&#34;nd&#34;&gt;@tornado.web.asynchronous&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;client&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tornado&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;httpclient&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AsyncHTTPClient&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;client&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fetch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;http://groovematic.com/&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;callback&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_on_finish&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        
            &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;_on_finish&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
                &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;write&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;code&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
                &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;finish&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
        &lt;/pre&gt;&lt;/div&gt;
        &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
        
        &lt;p&gt;Nothing&#39;s wrong isn&#39;t it? But what if you want to get the result directly
        instead of using callback?
        You shouldn&#39;t worry that much, there&#39;s &lt;code&gt;tornado.gen&lt;/code&gt; module which simplifies things.
        It helps you write a non-callback-style code.&lt;/p&gt;
        &lt;table class=&#34;codehilitetable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt; 1
         2
         3
         4
         5
         6
         7
         8
         9
        10
        11
        12&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;tornado.gen&lt;/span&gt;
        &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;tornado.httpclient&lt;/span&gt;
        &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;tornado.web&lt;/span&gt;
        
        &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;MainHandler&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tornado&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;web&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;RequestHandler&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
            &lt;span class=&#34;nd&#34;&gt;@tornado.web.asynchronous&lt;/span&gt;
            &lt;span class=&#34;nd&#34;&gt;@tornado.gen.engine&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;client&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tornado&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;httpclient&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AsyncHTTPClient&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;response&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;yield&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tornado&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gen&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Task&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;client&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fetch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;http://groovematic.com/&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;write&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;code&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
                &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;finish&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
        &lt;/pre&gt;&lt;/div&gt;
        &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
        
        &lt;p&gt;Yay, it looks better now. Say goodbye to callbacks spaghetti then.&lt;/p&gt;
        &lt;h2&gt;Morals Of The Story&lt;/h2&gt;
        &lt;ol&gt;
        &lt;li&gt;You don&#39;t care about asynchronous but still wanna use Tornado? Just do it.&lt;/li&gt;
        &lt;li&gt;You have things for asynchronous and wanna use Tornado? Do it carefully.&lt;/li&gt;
        &lt;li&gt;You don&#39;t like callbacks when writing Tornado-based app? Use helpers.&lt;/li&gt;
        &lt;/ol&gt;
        &lt;p&gt;&lt;strong&gt;PS&lt;/strong&gt;: Eventually you&#39;ll get this Tornado thingy sooner or later.
        You might roll your own IOLoop-compatible library someday (i wrote &lt;a href=&#34;https://github.com/iromli/dusky&#34;&gt;dusky&lt;/a&gt;).
        It&#39;s always fun to learn something new. Trust me, i&#39;ve been there, done that.&lt;/p&gt;</content>
            </entry>
    
        <entry>
                <title>Welcoming Acrylamid</title>
                <link rel="alternate" type="text/html" href="http://groovematic.com/2013/01/welcoming-acrylamid/" />
                <id>tag:groovematic.com,2013-01-23:/2013/01/welcoming-acrylamid</id>
                <updated>2013-01-23T15:36:00Z</updated>
                
                <author>
                    <name>Isman Firmansyah</name>
                    <uri>http://groovematic.com/</uri>
                    <email>isman.firmansyah@gmail.com</email>
                </author>
                <content type="html">&lt;h2&gt;A Short Story: An Introduction&lt;/h2&gt;
        &lt;p&gt;Recently, i switched to &lt;a href=&#34;http://posativ.org/acrylamid/&#34;&gt;Acrylamid&lt;/a&gt; as my website generator.
        So, what is Acrylamid anyway? Quoted from its GitHub project page:&lt;/p&gt;
        &lt;blockquote&gt;
        &lt;p&gt;Acrylamid is a mixture of nanoc, Pyblosxom and Pelican licensed under BSD Style, 2 clauses.&lt;/p&gt;
        &lt;/blockquote&gt;
        &lt;p&gt;Except &lt;a href=&#34;http://pyblosxom.bluesock.org/&#34;&gt;Pyblosxom&lt;/a&gt;, i&#39;ve tried &lt;a href=&#34;http://nanoc.stoneship.org/&#34;&gt;nanoc&lt;/a&gt; and &lt;a href=&#34;http://getpelican.com/&#34;&gt;Pelican&lt;/a&gt;.
        Both are cool projects, but in the end i chose nanoc over Pelican. Despite of being a Ruby-based, nanoc gave me all i want -- the flexibility.
        Then the problem came up. Whenever i need to customize the library, i cringed for knowing that my Ruby knowledge is horrible.&lt;/p&gt;
        &lt;p&gt;During my journey to find a nanoc-like Python-based static website generator, i rant about it on Twitter.
        Surprisingly, the core developer of nanoc gave his reaction.&lt;/p&gt;
        &lt;p&gt;&lt;img alt=&#34;me and dennis having a talk&#34; class=&#34;thumbnail&#34; src=&#34;http://groovematic.com/img/2013/01/nanoc-convo.png&#34;/&gt;&lt;/p&gt;
        &lt;p&gt;As you could see, i was using &lt;a href=&#34;https://github.com/Anomareh/mynt&#34;&gt;Mynth&lt;/a&gt; before i found Acrylamid. Anyway, here&#39;s my reaction after reading Acrylamid&#39;s &lt;code&gt;README.rst&lt;/code&gt;:&lt;/p&gt;
        &lt;p&gt;&lt;img alt=&#34;first impression&#34; class=&#34;thumbnail&#34; src=&#34;http://groovematic.com/img/2013/01/i-found-acrylamid.png&#34;/&gt;&lt;/p&gt;
        &lt;p&gt;Well, that&#39;s true. Acrylamid is promising. Moreover, it&#39;s built on top of Python, i feel confident to use it whatever i want. I also made &lt;a href=&#34;https://github.com/posativ/acrylamid/pull/97&#34;&gt;my first contribution&lt;/a&gt; recently.&lt;/p&gt;
        &lt;h2&gt;Another Story: The Gotchas&lt;/h2&gt;
        &lt;blockquote&gt;
        &lt;p&gt;There is always first time for everything.&lt;/p&gt;
        &lt;/blockquote&gt;
        &lt;p&gt;I use LESS alot, so i gave a try on how to integrate LESS and Acrylamid.
        Fortunately, Acrylamid does have &lt;code&gt;LESS&lt;/code&gt; static filter.
        But the thing is, i have 2 LESS files, &lt;code&gt;a.less&lt;/code&gt; and &lt;code&gt;b.less&lt;/code&gt; under &lt;code&gt;theme/less&lt;/code&gt; directory.&lt;/p&gt;
        &lt;table class=&#34;codehilitetable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt; 1
         2
         3
         4
         5
         6
         7
         8
         9
        10
        11
        12
        13&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;c&#34;&gt;/* === a.less === */&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;@size&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;10px&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;nc&#34;&gt;.floatleft&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;float&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;left&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;margin&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;size&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        
        &lt;span class=&#34;c&#34;&gt;/* === b.less === */&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;@size&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;10px&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;nc&#34;&gt;.floatright&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;float&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;right&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;margin&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;size&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        &lt;/pre&gt;&lt;/div&gt;
        &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
        
        &lt;p&gt;It was working fine when i invoked &lt;code&gt;acrylamid autocompile&lt;/code&gt;, but things were going insane when i was trying to re-use variable.&lt;/p&gt;
        &lt;table class=&#34;codehilitetable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt; 1
         2
         3
         4
         5
         6
         7
         8
         9
        10
        11
        12
        13&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;c&#34;&gt;/* === a.less === */&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;@import&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;b&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;@size&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;10px&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;nc&#34;&gt;.floatleft&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;float&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;left&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;margin&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;size&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        
        &lt;span class=&#34;c&#34;&gt;/* === b.less === */&lt;/span&gt;
        &lt;span class=&#34;nc&#34;&gt;.floatright&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;float&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;right&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;margin&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;size&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        &lt;/pre&gt;&lt;/div&gt;
        &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
        
        &lt;p&gt;Yeah, LESS was angry!
        This happened because Acrylamid parses each file in separate process.
        That&#39;s why when &lt;code&gt;b.less&lt;/code&gt; is parsed, the &lt;code&gt;lessc&lt;/code&gt; executable will complain about missing &lt;code&gt;@size&lt;/code&gt; variable.&lt;/p&gt;
        &lt;p&gt;I was scratching my head then, until i found &lt;a href=&#34;https://github.com/markvl/www.vlent.nl&#34;&gt;an example&lt;/a&gt;.
        It uses SASS, but the concept of compiling the assets is similar to my case.
        So i just moved all &lt;code&gt;.less&lt;/code&gt; files out from &lt;code&gt;theme&lt;/code&gt; to &lt;code&gt;less&lt;/code&gt; directory.
        Afterwards, since LESS doesn&#39;t have a watcher, i use &lt;a href=&#34;https://github.com/gorakhargosh/watchdog&#34;&gt;Watchdog&lt;/a&gt; to monitor the changes.&lt;/p&gt;
        &lt;table class=&#34;codehilitetable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;1
        2
        3
        4
        5&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;watchmedo shell-command &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
            --patterns&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;*.less&amp;quot;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
            --recursive &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
            --command&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;lessc -x $PWD/less/a.less &amp;gt; $PWD/theme/css/b.css&amp;quot;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
            &lt;span class=&#34;nv&#34;&gt;$PWD&lt;/span&gt;
        &lt;/pre&gt;&lt;/div&gt;
        &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
        
        &lt;p&gt;Each time any &lt;code&gt;.less&lt;/code&gt; is modified, &lt;code&gt;watchmedo&lt;/code&gt; invokes &lt;code&gt;lessc&lt;/code&gt; and compiles the file into CSS.
        Acrylamid will recognize the changes there.
        Voila, everything is worked as i expected.&lt;/p&gt;
        &lt;h2&gt;The Conclusion&lt;/h2&gt;
        &lt;p&gt;Acrylamid is cool and flexible enough. I don&#39;t have more words to say, just Try It and See.&lt;/p&gt;</content>
            </entry>
    
        <entry>
                <title>Deprecating The Year 2012</title>
                <link rel="alternate" type="text/html" href="http://groovematic.com/2012/12/deprecating-the-year-2012/" />
                <id>tag:groovematic.com,2012-12-31:/2012/12/deprecating-the-year-2012</id>
                <updated>2012-12-30T17:00:00Z</updated>
                
                <author>
                    <name>Isman Firmansyah</name>
                    <uri>http://groovematic.com/</uri>
                    <email>isman.firmansyah@gmail.com</email>
                </author>
                <content type="html">&lt;h2&gt;From 2012, With Love&lt;/h2&gt;
        &lt;p&gt;It&#39;s the end of 2012. So many new friends, lessons, and love.&lt;/p&gt;
        &lt;h3&gt;Things I&#39;ve Learnt&lt;/h3&gt;
        &lt;p&gt;During this year, i spend my days on building web services and console scripts -- less HTML, quirkey JavaScript, and CSS i have to care about. Most of the time, terminal is my truly beloved friend. Here&#39;s the screenshot of it:&lt;/p&gt;
        &lt;p&gt;&lt;img alt=&#34;console&#34; src=&#34;http://groovematic.com/img/2012/12/console.png&#34;/&gt;&lt;/p&gt;
        &lt;p&gt;From left to right:&lt;/p&gt;
        &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;http://git-scm.com/&#34; target=&#34;_blank&#34;&gt;git&lt;/a&gt; CLI with custom &lt;a href=&#34;https://github.com/iromli/dotfiles/blob/master/_gitconfig&#34;&gt;config&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;http://www.vim.org/&#34; target=&#34;_blank&#34;&gt;ViM&lt;/a&gt; with Twilight colorscheme&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;https://github.com/jkbr/httpie&#34; target=&#34;_blank&#34;&gt;HTTPie&lt;/a&gt; with &lt;code&gt;monokai&lt;/code&gt; theme&lt;/li&gt;
        &lt;/ul&gt;
        &lt;h3&gt;People I&#39;ve Met&lt;/h3&gt;
        &lt;p&gt;&lt;img alt=&#34;Python ID&#34; class=&#34;thumbnail&#34; src=&#34;http://groovematic.com/img/2012/12/minipycon-2012.jpg&#34;/&gt;&lt;/p&gt;
        &lt;p&gt;Python Indonesia meetup at Detik, and it was fun!! We share knowledge, insight, almost anything about Python and the community itself.&lt;/p&gt;
        &lt;p&gt;&lt;img alt=&#34;blaast&#34; class=&#34;thumbnail&#34; src=&#34;http://groovematic.com/img/2012/12/blaast-sixreps.jpg&#34;/&gt;&lt;/p&gt;
        &lt;p&gt;&lt;a href=&#34;http://www.blaast.com/&#34;&gt;Blaast&lt;/a&gt; Indonesia representatives visited SixReps HQ.
        They gave a talk about their platform, cloud mobile, and a little bit of NodeJS.&lt;/p&gt;
        &lt;p&gt;&lt;img alt=&#34;hackathon&#34; class=&#34;thumbnail&#34; src=&#34;http://groovematic.com/img/2012/12/startup-asia.jpg&#34;/&gt;&lt;/p&gt;
        &lt;p&gt;My first hackathon event -- 48 hours, hundreds of developers, cold weather, lovely city Bandung.&lt;/p&gt;
        &lt;h2&gt;Roadmap For 2013 (And Beyond)&lt;/h2&gt;
        &lt;blockquote&gt;
        &lt;p&gt;Only the dead have seen the end of war.&lt;/p&gt;
        &lt;/blockquote&gt;
        &lt;p&gt;Well, that&#39;s what Plato said. But it&#39;s true. I have many things i want to achieve:&lt;/p&gt;
        &lt;ul&gt;
        &lt;li&gt;Improve my Python knowledge.&lt;/li&gt;
        &lt;li&gt;I have things for concurrency so i wanna learn programming language designed for it -- &lt;a href=&#34;http://golang.org/&#34; target=&#34;_blank&#34;&gt;Go&lt;/a&gt; is very interesting, and &lt;a href=&#34;http://groovematic.com/2012/12/deprecating-the-year-2012/elixir-lang.org&#34; target=&#34;_blank&#34;&gt;Elixir&lt;/a&gt; is promising.&lt;/li&gt;
        &lt;li&gt;&lt;del&gt;Learn &lt;a href=&#34;http://lesscss.org/&#34; target=&#34;_blank&#34;&gt;LessCSS&lt;/a&gt; and &lt;a href=&#34;http://groovematic.com/2012/12/deprecating-the-year-2012/maxtaco.github.com/coffee-script/index.html&#34;&gt;Iced CoffeeScript&lt;/a&gt; -- a variant of &lt;a href=&#34;http://coffeescript.org/&#34; target=&#34;_blank&#34;&gt;CoffeeScript&lt;/a&gt; with coroutine in mind.&lt;/del&gt; Apparently, my interest has been shifted to anything that involves less client-side programming.&lt;/li&gt;
        &lt;li&gt;Be a better man.&lt;/li&gt;
        &lt;/ul&gt;
        &lt;p&gt;Goodbye 2012, howdy 2013 ...&lt;/p&gt;</content>
            </entry>
    </feed>